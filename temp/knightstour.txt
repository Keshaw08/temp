import numpy as np

pathRow = [2,1,-1,-2,-2,-1,1,2]
pathCol = [1,2,2,1,-1,-2,-2,-1]

def KnightTour(visited, row, col, move):
    if(move == 64):
        for i in range(8):
            for j in range(8):
                if(visited[i][j] < 10):
                    visited[i][j] = str("0" + str(visited[i][j]))
                print(f"{visited[i][j]} ",end=" ")
            print()
        return True
    else:
        for i in range(len(pathRow)):
            newRow = row + pathRow[i]
            newCol = col + pathCol[i]
            if(ifValidMove(visited,newRow,newCol)):
                move+=1
                visited[newRow][newCol] = move
                if(KnightTour(visited,newRow,newCol,move)):
                    return True
                move-=1
                visited[newRow][newCol]=0 #backtrackingf
    return False

def ifValidMove(visited,newRow,newCol):
    if((newRow >= 0) and (newRow < 8) and (newCol >= 0) and (newCol < 8) and (visited[newRow][newCol]==0)):
        return True
    return False

visited = [[0 for i in range(8)] for j in range(8)]
visited[0][0] = 1
KnightTour(visited,0,0,1)